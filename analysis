摘要OpenCL是用于异构系统并行编程的标准。 通用编程标准的好处是显而易见的。 多个供应商可以为根据该标准编写的应用程序描述提供支持，从而减少了程序移植的时间。 虽然标准
带来了平台可移植性的明显好处，性能可移植性方面很大程度上留给了程序员。 由于具有不同特征的多个专有供应商实现，因此需要最优化策略，因此情况变得更糟。
在本文中，我们提出了可移植和性能可移植的OpenCL实现。 内核编译器的核心是可用来在具有不同并行硬件样式的多个平台上利用OpenCL程序的数据并行性。 内核编译器经过模块化处理，可与区域的特定于目标的并行映射分开执行与目标无关的并行区域形成，从而支持各种样式的细粒度并行资源，例如子字SIMD扩展，
SIMD数据路径和静态多问题。 与先前在源代码级别上使用的类似技术不同，并行区域形成可保留信息。
使用LLVM IR及其元数据基础架构实现数据并行性。以后的通用编译器遍历可有效利用此数据并行化。
提议的OpenCL开源实现也是平台可移植的，可以在多种架构上启用OpenCL商业化和仍在研究中的产品。 本文介绍如何实现实现的可移植性。 我们测试两个方面利用内核编译器和OpenCL实现实现可移植性
以不同的并行样式在各种平台上运行OpenCL应用程序资源。 结果表明，大多数基准测试应用程序在使用pocl进行编译的速度快于或接近最佳专有文件的速度适用于该平台的OpenCL实施。
